# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  todo-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Parameters:
  AutoPublishAliasName:
    Type: String
    Default: current
    Description: The alias used for Auto Publishing
# Parameters:
#   AppName:
#     Type: String
#     Description: Name of app
#   ClientDomains:
#     Type: CommaDelimitedList
#     Description: Array of domains allowerd to use this UserPool
#   AdminEmail:
#     Type: String
#     Description: Email address for administrator
#   AddGroupsToScopes:
#     Type: String
#     AllowedValues:
#       - 'true'
#       - 'false'
#     Default: 'false'

# Conditions:
#   ScopeGroups:
#     !Equals [!Ref AddGroupsToScopes, 'true']

Globals:
  Function:
    Environment:
      Variables:
        TABLE_NAME: ToDoTable

Resources:
  # This is an SNS Topic with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
  # SimpleTopic:
  #   Type: AWS::SNS::Topic
  # TodoCloudFrontHosting:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       DefaultCacheBehavior:
  #         CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
  #         TargetOriginId: origin1
  #         ViewerProtocolPolicy: redirect-to-https
  #       Enabled: true
  #       Origins:
  #         - CustomOriginConfig:
  #             OriginProtocolPolicy: match-viewer
  #           DomainName: "todo-client-bucket.s3.eu-north-1.amazonaws.com"
  #           Id: origin1

  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: apigateway.amazonaws.com
            Resource:
              - !GetAtt ToDoTable.Arn
              - !GetAtt ToDoApi.Arn
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      RoleName: ApiGatewayCloudWatchRole

  ExampleFunctionIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PolicyGeneratorLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowDDBTableRead
                Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ToDoTable}
              - Sid: AllowListingCognitoUsers
                Effect: Allow
                Action: cognito-idp:ListUsers
                Resource: !GetAtt TodoAppCognitoUserPool.Arn
        - PolicyName: CustomResourceLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowRolePolicyUpdate
                Effect: Allow
                Action: iam:UpdateAssumeRolePolicy
                Resource: '*'

  ToDoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number
      TableName: ToDoTable
  # This is the Lambda function definition associated with the source code: sns-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  TasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      AutoPublishAlias: !Ref AutoPublishAliasName
      FunctionName: TasksFunction
      Description: A Lambda function that connects to a gateway API for to-do list
      Runtime: nodejs12.x
      Handler: tasksHandler.handler
      Role: !GetAtt ExampleFunctionIAMRole.Arn
      Events:
        CreateListEvent:
          Type: Api
          Properties:
            Path: /createList
            Method: post
            RestApiId:
              Ref: ToDoApi
        GetListsEvent:
          Type: Api
          Properties:
            Path: /getLists
            Method: get
            RestApiId:
              Ref: ToDoApi
        RemoveListsEvent:
          Type: Api
          Properties:
            Path: /removeList/{id}
            Method: delete
            RestApiId:
              Ref: ToDoApi
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref ToDoTable

  APILambdaPermission:
    DependsOn: TasksFunction
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ToDoApi}/*'
      FunctionName: !Sub
        - ${FuncArn}:current
        - { FuncArn: !GetAtt TasksFunction.Arn }
      Principal: apigateway.amazonaws.com

  ToDoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ToDoApi
      StageName: dev
      DefinitionBody:
        swagger: 2.0
        info:
          version: '1.0'
          title: 'A nice title'
        basePath: /dev
        schemes:
          - 'https'
        paths:
          # options:
          #   x-amazon-apigateway-any-method:
          #     produces:
          #       - application/json
          #     responses:
          #       '200':
          #         description: 200 response
          #         headers:
          #           Access-Control-Allow-Origin:
          #             type: string
          #           Access-Control-Allow-Methods:
          #             type: string
          #           Access-Control-Allow-Headers:
          #             type: string
          /getLists:
            get:
              response: {}
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TasksFunction.Arn}:${AutoPublishAliasName}/invocations'
          /:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TasksFunction.Arn}:${AutoPublishAliasName}/invocations'
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
      Auth:
        DefaultAuthorizer: TodoAppCognitoAuthorizer
        Authorizers:
          TodoAppCognitoAuthorizer:
            UserPoolArn: !GetAtt TodoAppCognitoUserPool.Arn
      # Cors:
      #   AllowCredentials: true
      #   AllowHeaders: "'Content-Type, Authorization, Origin'"
      #   AllowMethods: "'GET,POST,DELETE,OPTIONS'"
      #   AllowOrigin: "'www.letsdo-list.com'"
      EndpointConfiguration:
        Type: REGIONAL

  # CreateListFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: .
  #     FunctionName: CreateListFunction
  #     Description: A Lambda function that creates a to-do list
  #     Runtime: nodejs12.x
  #     Handler: createFunction/createFunction.createList
  #     Events:
  #       CreateListEvent:
  #         Type: Api
  #         Properties:
  #           Path: /createList
  #           Method: post
  #           RestApiId:
  #             Ref: ToDoApi
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref ToDoTable
  # GetListsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: .
  #     FunctionName: GetListsFunction
  #     Description: A Lambda function that gets all to-do lists
  #     Runtime: nodejs12.x
  #     Handler: getFunction/getFunction.getLists
  #     Events:
  #       GetListsEvent:
  #         Type: Api
  #         Properties:
  #           Path: /getLists
  #           Method: get
  #           RestApiId:
  #             Ref: ToDoApi

  # RemoveListFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: .
  #     FunctionName: RemoveListFunction
  #     Description: A Lambda function that gets all to-do lists
  #     Runtime: nodejs12.x
  #     Handler: removeFunction/removeFunction.removeList
  #     Timeout: 5
  #     Events:
  #       RemoveListsEvent:
  #         Type: Api
  #         Properties:
  #           Path: /removeList/{id}
  #           Method: delete
  #           RestApiId:
  #             Ref: ToDoApi
  TodoAppCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ToDo-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      # UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  TodoAppCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoAppCognitoUserPool
      ClientName: ToDo-UserPoolClient
      # ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://www.letsdo-list.com/
      LogoutURLs:
        - https://www.letsdo-list.com/
      # CallbackURLs: !Ref ClientDomains
      # LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  # ToDoCognitoUserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties:
  #     Domain: todoauthentication
  #     UserPoolId: !Ref TodoAppCognitoUserPool

  TodoAppCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub todoapp-${AWS::AccountId}
      # Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref TodoAppCognitoUserPool

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin user group
      Precedence: 0
      UserPoolId: !Ref TodoAppCognitoUserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: ahmed.bazzara@tretton37.com
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: ahmed.bazzara@tretton37.com
      UserPoolId: !Ref TodoAppCognitoUserPool
  
  SecondAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: shadi21985@gmail.com
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: shadi21985@gmail.com
      UserPoolId: !Ref TodoAppCognitoUserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref TodoAppCognitoUserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref SecondAdminUser
      UserPoolId: !Ref TodoAppCognitoUserPool

Outputs:
  UserPoolId:
    Description: 'User pool ID'
    Value: !Ref TodoAppCognitoUserPool
    Export:
      Name: TodoApp:UserPoolId
      # Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Description: 'Application client ID'
    Value: !Ref TodoAppCognitoUserPoolClient

  AuthUrl:
    Description: 'URL user for authentication'
    Value: !Sub https://${TodoAppCognitoUserPoolDomain}.auth.${AWS::Region}.amazincognito.com
  # local test sam local invoke -e ./src/handlers/get-lists-function/lambda_event.json GetListsFunction

  # SNSPayloadLogger:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Description: A Lambda function that logs the payload of messages sent to an associated SNS topic.
  #     Runtime: nodejs12.x
  #     Handler: dist/handlers/sns-payload-logger.snsPayloadLoggerHandler
  #     # This property associates this Lambda function with the SNS topic defined above, so that whenever the topic
  #     # receives a message, the Lambda function is invoked
  #     Events:
  #       SNSTopicEvent:
  #         Type: SNS
  #         Properties:
  #           Topic: !Ref SimpleTopic
  #     MemorySize: 128
  #     Timeout: 100
  #     Policies:
  #       # Give Lambda basic execution Permission to the helloFromLambda
  #       - AWSLambdaBasicExecutionRole
