# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  todo-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Parameters:
  AutoPublishAliasName:
    Type: String
    Default: current
    Description: The alias used for Auto Publishing
# Parameters:
#   AppName:
#     Type: String
#     Description: Name of app
#   ClientDomains:
#     Type: CommaDelimitedList
#     Description: Array of domains allowerd to use this UserPool
#   AdminEmail:
#     Type: String
#     Description: Email address for administrator
#   AddGroupsToScopes:
#     Type: String
#     AllowedValues:
#       - 'true'
#       - 'false'
#     Default: 'false'

# Conditions:
#   ScopeGroups:
#     !Equals [!Ref AddGroupsToScopes, 'true']

Globals:
  Function:
    Environment:
      Variables:
        TABLE_NAME: ToDoTable

Resources:
  ApiGatewayCloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
      RoleName: ApiGatewayCloudWatchRole

  ApiGatewayAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayCloudWatchRole.Arn"

  ExampleFunctionIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Policies:
        - PolicyName: PolicyGeneratorLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowDDBTableRead
                Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ToDoTable}
              - Sid: AllowListingCognitoUsers
                Effect: Allow
                Action: cognito-idp:ListUsers
                Resource: !GetAtt TodoAppCognitoUserPool.Arn
        - PolicyName: CustomResourceLambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowRolePolicyUpdate
                Effect: Allow
                Action: iam:UpdateAssumeRolePolicy
                Resource: '*'

  ToDoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number
      TableName: ToDoTable
  # This is the Lambda function definition associated with the source code: sns-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  TasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      AutoPublishAlias: !Ref AutoPublishAliasName
      FunctionName: TasksFunction
      Description: A Lambda function that connects to a gateway API for to-do list
      Runtime: nodejs12.x
      Handler: tasksHandler.handler
      Role: !GetAtt ExampleFunctionIAMRole.Arn
      Events:
        CreateListEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId:
              Ref: ToDoApi
        GetListsEvent:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId:
              Ref: ToDoApi
        # RemoveListsEvent:
        #   Type: Api
        #   Properties:
        #     Path: /tasks/{id}
        #     Method: delete
        #     RestApiId:
        #       Ref: ToDoApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTable

  APILambdaPermission:
    DependsOn: TasksFunction
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ToDoApi}/*'
      FunctionName: !Sub
        - ${FuncArn}:current
        - { FuncArn: !GetAtt TasksFunction.Arn }
      Principal: apigateway.amazonaws.com

  ToDoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ToDoApi
      StageName: dev
      Auth:
        DefaultAuthorizer: TodoAppCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          TodoAppCognitoAuthorizer:
            UserPoolArn: !GetAtt TodoAppCognitoUserPool.Arn
      Cors:
        AllowCredentials: true
        AllowHeaders: "'Content-Type,Authorization,Origin,x-api-key,X-Amz-Security-Token'"
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowOrigin: "'https://www.letsdo-list.com'"
      EndpointConfiguration:
        Type: REGIONAL

  TodoAppCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ToDo-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      # UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  TodoAppCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoAppCognitoUserPool
      ClientName: ToDo-UserPoolClient
      # ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - https://www.letsdo-list.com/
      LogoutURLs:
        - https://www.letsdo-list.com/
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  TodoAppCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub todoapp-${AWS::AccountId}
      UserPoolId: !Ref TodoAppCognitoUserPool

  TodoAppCognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      IdentityPoolName: TodoAppCognitoIdentityPool
      CognitoIdentityProviders:
        -
          ClientId: !Ref TodoAppCognitoUserPoolClient
          ProviderName: !GetAtt TodoAppCognitoUserPool.ProviderName

  TodoAppCognitoIdentityPoolIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition: { "ForAnyValue:StringLike": {"cognito-identity.amazonaws.com:amr": "authenticated" },  "StringEquals": {"cognito-identity.amazonaws.com:aud": !Ref TodoAppCognitoIdentityPool}}
            Principal:
              Federated:
                - "cognito-identity.amazonaws.com"
      Path: "/"
      "Policies":
        -
          PolicyName: main
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:GetTemplateSummary"
                  - "cloudformation:ListStacks"
                  - "cloudformation:ListStackResources"
                  - "s3:CreateBucket"
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "mobileanalytics:PutEvent"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*" 

  TodoAppCognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref TodoAppCognitoIdentityPool
      Roles: {"authenticated": !GetAtt TodoAppCognitoIdentityPoolIamRole.Arn}

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin user group
      Precedence: 0
      UserPoolId: !Ref TodoAppCognitoUserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: ahmed.bazzara@1337.tech
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: ahmed.bazzara@1337.tech
      UserPoolId: !Ref TodoAppCognitoUserPool
  
  SecondAdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: shadi21985@gmail.com
      DesiredDeliveryMediums:
        - EMAIL
      ForceAliasCreation: true
      UserAttributes:
        - Name: email
          Value: shadi21985@gmail.com
      UserPoolId: !Ref TodoAppCognitoUserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref TodoAppCognitoUserPool

  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref SecondAdminUser
      UserPoolId: !Ref TodoAppCognitoUserPool

Outputs:
  UserPoolId:
    Description: 'User pool ID'
    Value: !Ref TodoAppCognitoUserPool
    Export:
      Name: TodoApp:UserPoolId
      # Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Description: 'Application client ID'
    Value: !Ref TodoAppCognitoUserPoolClient

  AuthUrl:
    Description: 'URL user for authentication'
    Value: !Sub https://${TodoAppCognitoUserPoolDomain}.auth.${AWS::Region}.amazincognito.com

