# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  todo-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Globals:
  Function:
    Environment:
      Variables:
        TABLE_NAME: ToDoTable

# Parameters:
#   AppName:
#     Type: String
#     Description: Name of app
#   ClientDomains:
#     Type: CommaDelimitedList
#     Description: Array of domains allowerd to use this UserPool
#   AdminEmail:
#     Type: String
#     Description: Email address for administrator
#   AddGroupsToScopes:
#     Type: String
#     AllowedValues:
#       - 'true'
#       - 'false'
#     Default: 'false'

# Conditions:
#   ScopeGroups:
#     !Equals [!Ref AddGroupsToScopes, 'true']

Resources:
  # This is an SNS Topic with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html
  # SimpleTopic:
  #   Type: AWS::SNS::Topic
  ToDoApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ToDoApi
      StageName: dev
      Auth:
        DefaultAuthorizer: TodoAppCognitoAuthorizer
        Authorizers:
          TodoAppCognitoAuthorizer:
            UserPoolArn: !GetAtt TodoAppCognitoUserPool.Arn
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type, Authorization'"
        AllowOrigin: "'http://localhost:3001'"
        AllowCredentials: true
      EndpointConfiguration:
        Type: REGIONAL

  ToDoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number
      TableName: ToDoTable
  # This is the Lambda function definition associated with the source code: sns-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  CreateListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      FunctionName: CreateListFunction
      Description: A Lambda function that creates a to-do list
      Runtime: nodejs12.x
      Handler: dist/createFunction/createFunction.createList
      Timeout: 5
      Events:
        CreateListEvent:
          Type: Api
          Properties:
            Path: /createList
            Method: post
            cors: true
            RestApiId:
              Ref: ToDoApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTable
  GetListsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      FunctionName: GetListsFunction
      Description: A Lambda function that gets all to-do lists
      Runtime: nodejs12.x
      Handler: dist/getFunction/getFunction.getLists
      Timeout: 5
      Events:
        GetListsEvent:
          Type: Api
          Properties:
            Path: /getLists
            Method: get
            cors: true
            RestApiId:
              Ref: ToDoApi

  RemoveListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      FunctionName: RemoveListFunction
      Description: A Lambda function that gets all to-do lists
      Runtime: nodejs12.x
      Handler: dist/removeFunction/removeFunction.removeList
      Timeout: 5
      Events:
        RemoveListsEvent:
          Type: Api
          Properties:
            Path: /removeList/{id}
            Method: delete
            cors: true
            RestApiId:
              Ref: ToDoApi

  TodoAppCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ToDo-UserPool
      # UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  TodoAppCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref TodoAppUserPool
      ClientName: ToDo-UserPoolClient
      # ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - http://localhost:3001
      LogoutURLs:
        - http://localhost:3001
      # CallbackURLs: !Ref ClientDomains
      # LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
  
  TodoAppCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub todoapp-${AWS::AccountId}
      # Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref TodoAppUserPool

  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admins
      Description: Admin user group
      Precedence: 0
      UserPoolId: !Ref TodoAppUserPool

  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: ahmed.bazzara@tretton37.com
      DesiredDeliveryMediums:
       - EMAIL
      ForceAliasCreation: true
      UserAttributes:
       - Name: email
         Value: ahmed.bazzara@tretton37.com
      UserPoolId: !Ref TodoAppCognitoUserPool
    
  AddUserToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties:
      GroupName: !Ref AdminUserGroup
      Username: !Ref AdminUser
      UserPoolId: !Ref TodoAppUserPool

Outputs:
  UserPoolId:
    Description: "User pool ID"
    Value: !Ref TodoAppUserPool
    Export:
      Name: TodoApp:UserPoolId
      # Name: !Sub ${AppName}:UserPoolId
  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref TodoAppCognitoUserPoolClient

  AuthUrl:
    Description: "URL user for authentication"
    Value: !Sub https://${TodoAppCognitoUserPoolDomain}.auth.${AWS::Region}.amazincognito.com
  # local test sam local invoke -e ./src/handlers/get-lists-function/lambda_event.json GetListsFunction

  # SNSPayloadLogger:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Description: A Lambda function that logs the payload of messages sent to an associated SNS topic.
  #     Runtime: nodejs12.x
  #     Handler: dist/handlers/sns-payload-logger.snsPayloadLoggerHandler
  #     # This property associates this Lambda function with the SNS topic defined above, so that whenever the topic
  #     # receives a message, the Lambda function is invoked
  #     Events:
  #       SNSTopicEvent:
  #         Type: SNS
  #         Properties:
  #           Topic: !Ref SimpleTopic
  #     MemorySize: 128
  #     Timeout: 100
  #     Policies:
  #       # Give Lambda basic execution Permission to the helloFromLambda
  #       - AWSLambdaBasicExecutionRole
